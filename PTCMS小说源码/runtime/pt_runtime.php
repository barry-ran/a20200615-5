<?php $GLOBALS['_automap']=array (
  'model' => 
  array (
    'admin_group' => 
    array (
      'admin' => '/www/wwwroot/ptxsok.hui11.top/application/admin/model/admin_group.php',
    ),
    'admin_node' => 
    array (
      'admin' => '/www/wwwroot/ptxsok.hui11.top/application/admin/model/admin_node.php',
    ),
    'admin_user' => 
    array (
      'admin' => '/www/wwwroot/ptxsok.hui11.top/application/admin/model/admin_user.php',
    ),
    'module' => 
    array (
      'admin' => '/www/wwwroot/ptxsok.hui11.top/application/admin/model/module.php',
    ),
    'plugin' => 
    array (
      'admin' => '/www/wwwroot/ptxsok.hui11.top/application/admin/model/plugin.php',
    ),
    'theme' => 
    array (
      'admin' => '/www/wwwroot/ptxsok.hui11.top/application/admin/model/theme.php',
    ),
    'friendlink' => 
    array (
      'friendlink' => '/www/wwwroot/ptxsok.hui11.top/application/friendlink/model/friendlink.php',
    ),
    'ad' => 
    array (
      'ad' => '/www/wwwroot/ptxsok.hui11.top/application/ad/model/ad.php',
    ),
    'page' => 
    array (
      'page' => '/www/wwwroot/ptxsok.hui11.top/application/page/model/page.php',
    ),
    'novelsearch_chapter' => 
    array (
      'novelsearch' => '/www/wwwroot/ptxsok.hui11.top/application/novelsearch/model/novelsearch_chapter.php',
    ),
    'novelsearch_down' => 
    array (
      'novelsearch' => '/www/wwwroot/ptxsok.hui11.top/application/novelsearch/model/novelsearch_down.php',
    ),
    'novelsearch_info' => 
    array (
      'novelsearch' => '/www/wwwroot/ptxsok.hui11.top/application/novelsearch/model/novelsearch_info.php',
    ),
    'novelsearch_log' => 
    array (
      'novelsearch' => '/www/wwwroot/ptxsok.hui11.top/application/novelsearch/model/novelsearch_log.php',
    ),
    'novelsearch_site' => 
    array (
      'novelsearch' => '/www/wwwroot/ptxsok.hui11.top/application/novelsearch/model/novelsearch_site.php',
    ),
    'top' => 
    array (
      'novelsearch' => '/www/wwwroot/ptxsok.hui11.top/application/novelsearch/model/top.php',
    ),
    'collect' => 
    array (
      'rule' => '/www/wwwroot/ptxsok.hui11.top/application/rule/model/collect.php',
      'ruled' => '/www/wwwroot/ptxsok.hui11.top/application/ruled/model/collect.php',
    ),
    'collect_base' => 
    array (
      'rule' => '/www/wwwroot/ptxsok.hui11.top/application/rule/model/collect_base.php',
      'ruled' => '/www/wwwroot/ptxsok.hui11.top/application/ruled/model/collect_base.php',
    ),
    'collect_op' => 
    array (
      'rule' => '/www/wwwroot/ptxsok.hui11.top/application/rule/model/collect_op.php',
      'ruled' => '/www/wwwroot/ptxsok.hui11.top/application/ruled/model/collect_op.php',
    ),
    'rule' => 
    array (
      'rule' => '/www/wwwroot/ptxsok.hui11.top/application/rule/model/rule.php',
    ),
    'rule_collect' => 
    array (
      'rule' => '/www/wwwroot/ptxsok.hui11.top/application/rule/model/rule_collect.php',
    ),
    'rule_green' => 
    array (
      'rule' => '/www/wwwroot/ptxsok.hui11.top/application/rule/model/rule_green.php',
      'ruled' => '/www/wwwroot/ptxsok.hui11.top/application/ruled/model/rule_green.php',
    ),
    'user' => 
    array (
      'user' => '/www/wwwroot/ptxsok.hui11.top/application/user/model/user.php',
    ),
    'user_habbit' => 
    array (
      'user' => '/www/wwwroot/ptxsok.hui11.top/application/user/model/user_habbit.php',
    ),
    'user_mark' => 
    array (
      'user' => '/www/wwwroot/ptxsok.hui11.top/application/user/model/user_mark.php',
    ),
    'user_vote' => 
    array (
      'user' => '/www/wwwroot/ptxsok.hui11.top/application/user/model/user_vote.php',
    ),
    'cron' => 
    array (
      'cron' => '/www/wwwroot/ptxsok.hui11.top/application/cron/model/cron.php',
    ),
    'xml' => 
    array (
      'sitemap' => '/www/wwwroot/ptxsok.hui11.top/application/sitemap/model/xml.php',
      'wapsitemap' => '/www/wwwroot/ptxsok.hui11.top/application/wapsitemap/model/xml.php',
    ),
    'author' => 
    array (
      'author' => '/www/wwwroot/ptxsok.hui11.top/application/author/model/author.php',
    ),
    'sql' => 
    array (
      'update' => '/www/wwwroot/ptxsok.hui11.top/application/update/model/sql.php',
    ),
    '2xml' => 
    array (
      'wapsitemap' => '/www/wwwroot/ptxsok.hui11.top/application/wapsitemap/model/2xml.php',
    ),
    'down' => 
    array (
      'ruled' => '/www/wwwroot/ptxsok.hui11.top/application/ruled/model/down.php',
    ),
    'ruled' => 
    array (
      'ruled' => '/www/wwwroot/ptxsok.hui11.top/application/ruled/model/ruled.php',
    ),
    'ruled_collect' => 
    array (
      'ruled' => '/www/wwwroot/ptxsok.hui11.top/application/ruled/model/ruled_collect.php',
    ),
    'attachment' => 
    array (
      'common' => '/www/wwwroot/ptxsok.hui11.top/application/common/model/attachment.php',
    ),
    'category' => 
    array (
      'common' => '/www/wwwroot/ptxsok.hui11.top/application/common/model/category.php',
    ),
    'config' => 
    array (
      'common' => '/www/wwwroot/ptxsok.hui11.top/application/common/model/config.php',
    ),
  ),
  'block' => 
  array (
    'friendlink' => 
    array (
      'friendlink' => '/www/wwwroot/ptxsok.hui11.top/application/friendlink/block/friendlink.php',
    ),
    'getad' => 
    array (
      'ad' => '/www/wwwroot/ptxsok.hui11.top/application/ad/block/getad.php',
    ),
    'pagelist' => 
    array (
      'page' => '/www/wwwroot/ptxsok.hui11.top/application/page/block/pagelist.php',
    ),
    'authorlist' => 
    array (
      'novelsearch' => '/www/wwwroot/ptxsok.hui11.top/application/novelsearch/block/authorlist.php',
    ),
    'categorylist' => 
    array (
      'novelsearch' => '/www/wwwroot/ptxsok.hui11.top/application/novelsearch/block/categorylist.php',
    ),
    'chapterlist' => 
    array (
      'novelsearch' => '/www/wwwroot/ptxsok.hui11.top/application/novelsearch/block/chapterlist.php',
    ),
    'dirlist' => 
    array (
      'novelsearch' => '/www/wwwroot/ptxsok.hui11.top/application/novelsearch/block/dirlist.php',
    ),
    'downlist' => 
    array (
      'novelsearch' => '/www/wwwroot/ptxsok.hui11.top/application/novelsearch/block/downlist.php',
    ),
    'novellist' => 
    array (
      'novelsearch' => '/www/wwwroot/ptxsok.hui11.top/application/novelsearch/block/novellist.php',
    ),
    'novelsimilar' => 
    array (
      'novelsearch' => '/www/wwwroot/ptxsok.hui11.top/application/novelsearch/block/novelsimilar.php',
    ),
    'samemark' => 
    array (
      'novelsearch' => '/www/wwwroot/ptxsok.hui11.top/application/novelsearch/block/samemark.php',
    ),
    'sitelastchapter' => 
    array (
      'novelsearch' => '/www/wwwroot/ptxsok.hui11.top/application/novelsearch/block/sitelastchapter.php',
    ),
    'top' => 
    array (
      'novelsearch' => '/www/wwwroot/ptxsok.hui11.top/application/novelsearch/block/top.php',
    ),
    'page' => 
    array (
      'common' => '/www/wwwroot/ptxsok.hui11.top/application/common/block/page.php',
    ),
  ),
  'library' => 
  array (
    'compare' => 
    array (
      'common' => '/www/wwwroot/ptxsok.hui11.top/application/common/library/compare.php',
    ),
    'novel' => 
    array (
      'common' => '/www/wwwroot/ptxsok.hui11.top/application/common/library/novel.php',
    ),
    'rewrite' => 
    array (
      'common' => '/www/wwwroot/ptxsok.hui11.top/application/common/library/rewrite.php',
    ),
    'text' => 
    array (
      'common' => '/www/wwwroot/ptxsok.hui11.top/application/common/library/text.php',
    ),
    'tree' => 
    array (
      'common' => '/www/wwwroot/ptxsok.hui11.top/application/common/library/tree.php',
    ),
  ),
);function F($file, $content = false, $mod = '') { if ($content === false) { return is_file($file) ? file_get_contents($file) : false; } elseif ($content === null) { if (is_file($file)) { return unlink($file); } elseif (is_dir($file)) { $handle = opendir($file); while (($filename = readdir($handle)) !== false) { if ($filename !== '.' && $filename !== '..') F($file . '/' . $filename, null); } closedir($handle); return @rmdir($file); } } else { if (!strpos($file, '://') && !is_dir(dirname($file))) { mkdir(dirname($file), 0755, true); } if (is_array($content)) { $content = '<?php' . PHP_EOL . 'return ' . var_export($content, true) . ';'; } if ($mod) { return file_put_contents($file, strval($content), LOCK_EX | $mod); } else { return file_put_contents($file, strval($content), LOCK_EX); } } return false; } function halt($msg, $file = '', $line = '') { if ($_SERVER['REQUEST_METHOD'] == 'cli') { exit($msg); } else if (APP_DEBUG) { PT_Base::getInstance()->response->setHeader(); $e['message'] = $msg; $e['file'] = $file; $e['line'] = $line; include PT_PATH . '/error.tpl'; exit; } else { PT_Base::getInstance()->response->error($msg . ' [' . $file . '(' . $line . ')]'); } } function U($method = '', $args = array(), $ignores = array()) { static $rules = null, $_method = array(), $_map = array(), $power = false, $rewriteargparam = false; if ($rules === null) { $rules = PT_Base::getInstance()->config->get('url_rules'); $_map = PT_Base::getInstance()->config->get('map_module'); $power = PT_Base::getInstance()->config->get('rewritepower', false); $rewriteargparam = PT_Base::getInstance()->config->get('rewriteargparam', false); } if (!empty($ignores)) { foreach ($ignores as $key => $var) { if (isset($args[$key]) && $args[$key] == $var) unset($args[$key]); } } if (empty($_method[$method])) { if (substr_count($method, '.') == 1) { $_method[$method] = MODULE_NAME . '.' . $method; } elseif ($method === '') { $_method[$method] = MODULE_NAME . '.' . CONTROLLER_NAME . '.' . ACTION_NAME; } elseif (substr_count($method, '.') == 0) { $_method[$method] = MODULE_NAME . '.' . CONTROLLER_NAME . '.' . $method; } else { $_method[$method] = $method; } $_method[$method] = strtolower($_method[$method]); } $method = $_method[$method]; if (!empty($rules[$method]) && empty($args['_force'])) { $keys = array(); $rule = $rules[$method]; $oargs = $args; foreach ($args as $key => &$arg) { $keys[] = '{' . $key . '}'; $arg = rawurlencode(urldecode($arg)); if (strpos($rule, '{' . $key . '}')) unset($oargs[$key]); } $url = clearUrl(str_replace($keys, $args, $rule)); if (strpos($url, ']')) { $url = strtr($url, array('[' => '', ']' => '')); } if ($oargs && $rewriteargparam) { return PT_DIR . $url . (strpos($url, '?') ? '&' : '?') . http_build_query($oargs); } else { return PT_DIR . $url; } } else { list($param['m'], $param['c'], $param['a']) = explode('.', $method); if (isset($_map[$param['m']])) $param['m'] = $_map[$param['m']]; krsort($param); $param = array_merge($param, $args); if ($power) { if (isset($_GET['f'])) { $url = PT_DIR . '/' . $param['m'] . '/' . $param['c'] . '/' . $param['a'] . '.' . $_GET['f']; } else { $url = PT_DIR . '/' . $param['m'] . '/' . $param['c'] . '/' . $param['a']; } unset($param['m'], $param['c'], $param['a']); if ($param) { $url .= '?' . http_build_query($param); } } else { $url = __APP__ . '?' . http_build_query($param); } return $url; } } function clearUrl($url) { while (preg_match('#\[[^\[\]]*?\{\w+\}[^\[\]]*?\]#', $url, $match)) { $url = str_replace($match['0'], '', $url); } return $url; } function strip_whitespace($content) { $stripStr = ''; $tokens = token_get_all($content); $last_space = false; for ($i = 0, $j = count($tokens); $i < $j; $i++) { if (is_string($tokens[$i])) { $last_space = false; $stripStr .= $tokens[$i]; } else { switch ($tokens[$i][0]) { case T_COMMENT: case T_DOC_COMMENT: break; case T_WHITESPACE: if (!$last_space) { $stripStr .= ' '; $last_space = true; } break; case T_START_HEREDOC: $stripStr .= "<<<ptcms\n"; break; case T_END_HEREDOC: $stripStr .= "ptcms;\n"; for ($k = $i + 1; $k < $j; $k++) { if (is_string($tokens[$k]) && $tokens[$k] == ';') { $i = $k; break; } else if ($tokens[$k][0] == T_CLOSE_TAG) { break; } } break; default: $last_space = false; $stripStr .= $tokens[$i][1]; } } } return $stripStr; } function get_auto_map() { $map = array(); $dirs = array_unique(explode(',', trim((PT_Base::getInstance()->config->get('allow_module', null, '') . ',common'), ','))); foreach ($dirs as $dir) { $path = APP_PATH . '/' . $dir; if (!is_dir($path)) continue; $handle = opendir($path); while (($dirname = readdir($handle)) !== false) { if (in_array($dirname, array('model', 'block', 'library'))) { $handle1 = opendir($path . '/' . $dirname); while (($filename = readdir($handle1)) !== false) { $filepath = $path . '/' . $dirname . '/' . $filename; if ($filename{0} != '.' && is_dir($filepath)) { $handle2 = opendir($filepath); while (($filename1 = readdir($handle2)) !== false) { if (substr($filename1, -4) == '.php') { $map[$dirname][$filename . '_' . substr($filename1, 0, -4)][$dir] = $filepath . '/' . $filename1; } } closedir($handle2); } elseif (substr($filename, -4) == '.php') { $map[$dirname][substr($filename, 0, -4)][$dir] = $filepath; } } closedir($handle1); } } closedir($handle); } return $map; } function C($name = null, $value = null, $default = null) { static $handler = null; if (!$handler) $handler = PT_Base::getInstance()->config; if (empty($name)) { return $handler->get(); } if (is_string($name)) { $name = strtolower($name); if (is_null($value)) { return $handler->get($name, $default); } else { return $handler->set($name, $value); } } else if (is_array($name)) { return $handler->register($name); } return null; } function cookie($name, $value = '', $option = null) { static $handler = null; if (!$handler) $handler = PT_Base::getInstance()->cookie; if ('' === $value) { return $handler->get($name); } else if (is_null($value)) { $handler->rm($name); } else { $handler->set($name, $value, $option); } } function get_ip($default = '0.0.0.0') { return PT_Base::getInstance()->request->getIp($default); } function dump($arr) { echo '<pre>'; print_r($arr); echo '</pre>'; } function M($name = '') { static $handler = null; if (!$handler) $handler = PT_Base::getInstance(); return $handler->model($name); } function I($name, $filter = 'int', $default = null, $input = array()) { static $handler = null; if (!$handler) $handler = PT_Base::getInstance()->input; if ($input == array()) { if (strpos($name, '.')) { list($method, $name) = explode('.', $name, 2); } else { $method = 'post'; } switch (strtolower($method)) { case 'get' : $input = $_GET; break; case 'post' : $input = $_POST; break; case 'put' : parse_str(file_get_contents('php://input'), $input); break; case 'request' : $input = $_REQUEST; break; case 'session' : $input = $_SESSION; break; case 'cookie' : $input = $_COOKIE; $name = C('cookie_prefix') . $name; break; case 'server' : $input = $_SERVER; break; case 'globals' : $input = $GLOBALS; break; default: return null; } } return $handler->param($name, $filter, $default, $input); }
class PT_Base { protected static $single = null; protected static $_class = array(); protected static $_model = array(); protected $protected = array('api', 'block', 'cache', 'controller', 'config', 'cookie', 'db', 'dispatcher', 'filter', 'input', 'log', 'model', 'plugin', 'request', 'response', 'session', 'storage', 'view', 'pt'); public static function getInstance() { if (!self::$single) { self::$single = new PT_Base(); } return self::$single; } public function getInstanceof($name) { if (isset(self::$_class[$name])) { return self::$_class[$name]; } if ($name == 'pt') { return $this->pt = self::getInstance(); } if (is_file(PT_PATH . "/core/{$name}.php")) { $classname = 'PT_' . $name; if (!class_exists($classname, true)) pt::import(PT_PATH . "/core/{$name}.php"); return self::$_class[$name] = new $classname(); } return null; } public function __get($name) { return $this->$name = $this->getInstanceof($name); } public function model($name='') { $class = null; if (isset(self::$_model[$name])) return self::$_model[$name]; $classname = $name . 'Model'; if (class_exists($classname)) { return self::$_model[$name] = new $classname($name); } elseif ( $this->db($name)) { return self::$_model[$name] = $this->db($name); } return $class; } public function db($name) { return $this->pt->config->get('db_type')?$this->getInstanceof('db')->getInstance($name):false; } public function block($name) { return $this->getInstanceof('block')->getInstance($name); } public function load($name, $param=array()) { if(class_exists($name)){ if(!empty($param) && method_exists($name,'__construct')){ return call_user_func_array(array($name,'__construct'),$param); }else{ return new $name; } } return false; } }
class pt extends PT_Base { protected static $base; public function start() { self::$base = PT_Base::getInstance(); $this->init(); $this->plugin->call('app_init_start'); $this->config->register(self::import(APP_PATH . '/common/' . $this->request->getSiteCode() . '.config.php')); $this->plugin->call('dispatcher_start'); self::dispatcher(); $this->plugin->call('dispatcher_end'); defined('IS_POST') || define('IS_POST', $this->request->isPost()); defined('IS_GET') || define('IS_GET', $this->request->isGet()); defined('IS_AJAX') || define('IS_AJAX', $this->request->isAjax()); pt::import(APP_PATH . '/common/function.php'); if (MODULE_NAME != 'common') { $this->config->register(self::import(APP_PATH . '/' . MODULE_NAME . '/config.php')); self::import(APP_PATH . '/' . MODULE_NAME . '/function.php'); } $this->app(); } protected function init() { register_shutdown_function(array(__CLASS__, 'shutdown')); set_exception_handler(array(__CLASS__, 'exception')); spl_autoload_register(array(__CLASS__, 'autoload')); if (version_compare(PHP_VERSION, '5.4.0', '<')) { ini_set('magic_quotes_runtime', 0); if (get_magic_quotes_gpc()) { function stripslashes_deep($value) { $value = is_array($value) ? array_map('stripslashes_deep', $value) : (isset($value) ? stripslashes($value) : null); return $value; } $_POST = stripslashes_deep($_POST); $_GET = stripslashes_deep($_GET); $_COOKIE = stripslashes_deep($_COOKIE); } } $this->plugin->register($this->config->get('plugin', array())); } protected function app() { $this->plugin->call('controller_start'); $controllerFile = APP_PATH . '/' . MODULE_NAME . '/controller/' . CONTROLLER_NAME . '.php'; $classname = CONTROLLER_NAME . 'Controller'; $actionname = ACTION_NAME . 'Action'; if (MODULE_NAME == 'plugin') { $controllerFile = APP_PATH . '/common/plugin/' . CONTROLLER_NAME . '/manage.php'; $classname = 'manageController'; $actionname = ACTION_NAME . 'Action'; } elseif (!in_array(MODULE_NAME, explode(',', $this->config->get('allow_module', '')))) { $this->response->error(MODULE_NAME . '模块不允许访问'); } if (is_file($controllerFile)) { include $controllerFile; if (class_exists($classname, false)) { $app = new $classname(); if (method_exists($app, 'init')) { $app->init(); } if (method_exists($app, $actionname)) { $return=$app->$actionname(); if ($this->response->isAutoRender()) { switch ($_GET['f']) { case 'json': $data=empty($return)?$app->view->get():$return; $this->response->setBody($this->response->jsonEncode($data),'text/json'); break; case 'jsonp': $data=empty($return)?$app->view->get():$return; $this->response->setBody($this->response->jsonpEncode($data),'text/json'); break; case 'xml': $data=empty($return)?$app->view->get():$return; $this->response->setBody($this->response->xmlEncode($data),'text/xml'); break; default: $app->display(); } } } else { $this->response->error("当前控制器下" . get_class($app) . "找不到指定的方法 {$_GET['a']}Action"); } $this->plugin->call('controller_end'); } else { $this->response->error('控制器' . CONTROLLER_NAME . '对应的文件中未找到类' . $classname); } } else { $this->response->error(MODULE_NAME . '模块下控制器' . CONTROLLER_NAME . 'Controller对应的文件不存在'); } } public static function import($filename) { static $_importFiles = array(); if (!isset($_importFiles[$filename])) { if (is_file($filename)) { $_importFiles[$filename] = include $filename; } else { $_importFiles[$filename] = false; } } return $_importFiles[$filename]; } protected static function dispatcher() { self::$base->dispatcher->run(); define('MODULE_NAME', strtolower($_GET['m'])); define('CONTROLLER_NAME', strtolower($_GET['c'])); define('ACTION_NAME', strtolower($_GET['a'])); if ($_SERVER['REQUEST_METHOD'] != 'cli') { define('__SELF__', strip_tags($_SERVER['REQUEST_URI'])); define('__APP__', rtrim($_SERVER['SCRIPT_NAME'], '/')); define('__MODULE__', __APP__ . '?s=' . strtolower(empty($_GET['_m']) ? $_GET['m'] : $_GET['_m'])); define('__URL__', __MODULE__ . '/' . CONTROLLER_NAME); define('__ACTION__', __URL__ . '/' . ACTION_NAME); } } public static function autoload($class) { $classfile = strtolower(str_replace('_', '/', $class)); if (strpos($classfile, 'pt/') === 0) $classfile = str_replace('pt/', 'core/', $classfile); if (is_file(PT_PATH . '/core/' . $classfile . '.php')) { pt::import(PT_PATH . '/core/' . $classfile . '.php'); } if (is_file(PT_PATH . '/' . $classfile . '.php')) { pt::import(PT_PATH . '/' . $classfile . '.php'); } elseif (substr($classfile, -10) == 'controller') { if (!pt::import(APP_PATH . '/' . MODULE_NAME . '/controller/' . substr($classfile, 0, -10) . '.php')) { pt::import(APP_PATH . '/common/controller/' . substr($classfile, 0, -10) . '.php'); } } elseif (substr($classfile, -5) == 'model') { $classfile = substr(str_replace('/', '_', $classfile), 0, -5); if (isset($GLOBALS['_automap']['model'][$classfile])) { if (isset($GLOBALS['_automap']['model'][$classfile][MODULE_NAME])) { $file = $GLOBALS['_automap']['model'][$classfile][MODULE_NAME]; } elseif (isset($GLOBALS['_automap']['model'][$classfile]['common'])) { $file = $GLOBALS['_automap']['model'][$classfile]['common']; } else { $file = current(array_slice($GLOBALS['_automap']['model'][$classfile], 0, 1)); } pt::import($file); } } elseif (substr($classfile, -5) == 'block') { $classfile = substr($classfile, 0, -5); if (isset($GLOBALS['_automap']['block'][$classfile])) { if (isset($GLOBALS['_automap']['block'][$classfile][MODULE_NAME])) { $file = $GLOBALS['_automap']['block'][$classfile][MODULE_NAME]; } elseif (isset($GLOBALS['_automap']['block'][$classfile]['common'])) { $file = $GLOBALS['_automap']['block'][$classfile]['common']; } else { $file = current(array_slice($GLOBALS['_automap']['block'][$classfile], 0, 1)); } pt::import($file); } } elseif (substr($classfile, -6) == 'plugin') { $classname = substr($classfile, 0, -6); pt::import(APP_PATH . '/common/plugin/' . $classname . '/' . $classname . '.php'); } else { if (!pt::import(PT_PATH . '/library/' . $classfile . '.php') && isset($GLOBALS['_automap']['library'][$classfile])) { if (isset($GLOBALS['_automap']['library'][$classfile][MODULE_NAME])) { $file = $GLOBALS['_automap']['library'][$classfile][MODULE_NAME]; } elseif (isset($GLOBALS['_automap']['library'][$classfile]['common'])) { $file = $GLOBALS['_automap']['library'][$classfile]['common']; } else { $file = current(array_slice($GLOBALS['_automap']['library'][$classfile], 0, 1)); } pt::import($file); } } } public static function shutdown() { if (self::$base->config->get('log', false)) self::$base->log->build(); if (function_exists('pt_close')) { pt_close(); } if ($e = error_get_last()) { if (in_array($e['type'], array(1, 4))) { halt($e['message'], $e['file'], $e['line']); } } } public static function exception(Exception $e) { halt($e->getmessage(), $e->getFile(), $e->getLine()); } public static function error($errno, $errstr, $errfile, $errline) { switch ($errno) { case E_ERROR: case E_PARSE: case E_CORE_ERROR: case E_COMPILE_ERROR: halt($errstr, $errfile, $errline); break; case E_USER_ERROR: case E_STRICT: case E_USER_WARNING: case E_USER_NOTICE: default: break; } } }
class PT_Block{ protected $pt; public function __construct() { $this->pt=PT_Base::getInstance(); } public function getInstance($class) { static $_class; $class = $class . 'Block'; if (empty($_class[$class])) { if (class_exists($class)) { $_class[$class] = new $class(); }else{ $_class[$class] = null; } } return $_class[$class]; } public function getData($name,$param) { $key = $this->getKey($name,$param); $cachetime = $this->pt->input->param('cachetime','int',$this->pt->config->get('cachetime', 600),$param); $data = $this->pt->cache->get($key); $hander=$this->getInstance($name); if ($name){ if ($hander && (APP_DEBUG || $data === null)) { $data = $hander->run($param); if (!empty($param['template'])) { $this->pt->view->set($param); if ($layout=$this->pt->config->get('layout')){ $this->pt->config->set('layout',false); $data = $this->pt->view->fetch($param['template']); $this->pt->config->set('layout',$layout); }else{ $data = $this->pt->view->fetch($param['template']); } } $this->pt->cache->set($key, $data, $cachetime); } }else{ $this->pt->view->set($param); if ($layout=$this->pt->config->get('layout')){ $this->pt->config->set('layout',false); $data = $this->pt->view->fetch($param['template']); $this->pt->config->set('layout',$layout); }else{ $data = $this->pt->view->fetch($param['template']); } } if (isset($param['order']) && $param['order']=='rand'){ $param['num']=empty($param['num'])?count($data):$param['num']; $list=array(); if(count($data)>=$param['num']){ $num=$param['num']; $num=($num==0)?count($data):$num; $keys=array_rand($data,$num); if ($num==1) $keys=array($keys); foreach($keys as $v){ $list[]=$data[$v]; } $data=$list; } } return $data; } public function checkCache($key, $cachetime) { $data = $this->pt->cache->get($key); if (!isset($data['time']) || ($cachetime <> 0 && $data['time'] + $cachetime < NOW_TIME)) { return false; } return $data['data']; } public function getKey($name,$param) { return md5($name . serialize($param)); } } class Block extends PT_Block{}
class PT_Cache{ protected static $handler = null; public static function getInstance($type = '') { $type = $type ? $type : PT_Base::getInstance()->config->get('cache_driver', 'file'); if (empty(self::$handler[$type])) { $class = 'Driver_Cache_' . PT_Base::getInstance()->config->get('cache_driver'); self::$handler[$type] = new $class(PT_Base::getInstance()->config->get('cache_option', array())); } return self::$handler[$type]; } public static function set($key, $value, $time = 0) { $GLOBALS['_cacheWrite']++; return self::getInstance()->set($key, $value, $time); } public static function get($key) { $GLOBALS['_cacheRead']++; return self::getInstance()->get($key); } public static function rm($key) { return self::getInstance()->rm($key); } public static function clear() { self::getInstance()->clear(); } } class cache extends PT_cache{}
class PT_Config extends PT_Base{ protected static $_config=array(); public function get($name='', $default = null) { if ($name=='') return self::$_config; $name = strtolower($name); if (strpos($name,'.')){ $c = self::$_config; $fields = explode('.', $name); foreach($fields as $field){ if(!isset($c[$field])) return $default; $c = $c[$field]; } return $c; }else{ if (isset(self::$_config[$name])){ return self::$_config[$name]; }else{ self::$_config[$name]=$default; return self::$_config[$name]; } } } public function set($key, $var='') { if(empty($key)) return false; if (is_array($key)) return $this->register($key); $c = self::$_config; $k = &$c; $fields = explode('.', $key); foreach ($fields as $field) { $k = &$k[$field]; } $k = $var; self::$_config=$c; return true; } public function register($config){ if (!is_array($config)) return false; self::$_config = array_merge(self::$_config, array_change_key_case($config)); return true; } public function save($key, $value='') { $file=APP_PATH . '/common/config.php'; $config = include $file; if (is_array($key)){ $config=array_merge($config, $key); }elseif(isset($config[$key])){ $config[$key]=$value; }else{ return; } if (!F($file, $config)){ $this->response->error('修改失败，请检查'.$file . '文件权限',0,0); }; } } class config extends PT_config{}
class Driver_Cache_Memcache extends PT_Base { protected static $handler = null; protected static $prefix = null; public function __construct($option = array()) { if ((function_exists('saeAutoLoader') or function_exists('sae_auto_load')) && function_exists('memcache_init')) { self::$handler = memcache_init(); } elseif (isset($_SERVER['HTTP_BAE_LOGID'])) { include PT_PATH . '/library/bae/BaeMemcache.class.php'; $cacheid = $this->config->get('bae_cache_id'); $host = $this->config->get('bae_cache_host'); $port = $this->config->get('bae_cache_port'); $user = $this->config->get('bae_cache_user'); $pwd = $this->config->get('bae_cache_pwd'); self::$handler = new BaeMemcache($cacheid, $host . ': ' . $port, $user, $pwd); } else { self::$handler = new Memcache(); self::$handler->connect($this->config->get('memcache_host', '127.0.0.1'), $this->config->get('memcache_port', '11211')); } if (!self::$handler) { PT_Log::record('链接缓存驱动失败'); } self::$prefix = $this->config->get('cache_prefix', substr(md5(PT_ROOT), 3, 3) . '_'); } public function set($key, $value, $time = 0) { return self::$handler->set(self::$prefix . $key, $value, MEMCACHE_COMPRESSED, $time); } public function get($key) { $return = self::$handler->get(self::$prefix . $key); if ($return === false) return null; return $return; } public function rm($key) { return self::$handler->delete(self::$prefix . $key); } public function inc($key, $num = 1) { return self::$handler->increment(self::$prefix . $key, $num); } public function dec($key, $num = 1) { return self::$handler->decrement(self::$prefix . $key, $num); } public function clear() { self::$handler->flush(); } }
class PT_Controller extends PT_Base { public function getView() { static $view; if (!isset($view)) { $this->plugin->call('view_start'); $view = $this->view; $view->getTheme(); } return $view; } public function display($tpl = null, $module = null, $theme = null) { $this->response->disableRender(); $content = $this->fetch($tpl, $module, $theme); $this->show($content); } public function __set($name, $value) { if (in_array($name, $this->protected)) { $this->$name = $value; } else { $this->getView()->set($name, $value); } } public function __get($name) { $var = null; if (in_array($name, $this->protected)) { $var = parent::__get($name); } if ($var === null) { $var = $this->getView()->get($name); } return $var; } public function assign($name, $value = null) { $this->getView()->set($name, $value); } protected function show($content, $mimeType = 'text/html') { $this->response->setBody($content, $mimeType); } protected function fetch($tpl = null, $module = null, $theme = null) { return $this->view->fetch($tpl, $module, $theme); } protected function render($var) { if ($var === true) { $this->response->enableRender(); } elseif ($var === false) { $this->response->disableRender(); } else { $this->view->setFile($var); } } public function success($info='success', $jumpUrl = '', $second = 1) { if (isset($_GET['f']) && ($_GET['f'] == 'json' || $_GET['f'] == 'xml')) { return array('status' => 1, 'info' => $jumpUrl?$jumpUrl:'success', 'data' => $info); } $this->dispatchJump($info, 1, $jumpUrl, $second); } public function error($info='error', $jumpUrl = '', $second = 3) { if (isset($_GET['f']) && ($_GET['f'] == 'json' || $_GET['f'] == 'xml')) { return array('status' => 0, 'info' => $info, 'data' => $jumpUrl?$jumpUrl:array()); } $this->dispatchJump($info, 0, $jumpUrl, $second); } protected function dispatchJump($message, $status = 1, $jumpurl = '', $second = 1) { $this->config->set('layout', false); if ($this->request->isAjax() or $second === true) { $data['status'] = $status; $data['info'] = $message; $data['url'] = $jumpurl; $this->ajax($data); } else { defined('PT_SITENAME') ? $this->view->set('msgname', PT_SITENAME) : $this->view->set('msgname', $this->config->get('sitename', null, 'PTFrameWork')); if (is_array($jumpurl)) { if (count($jumpurl) > 1) { $second = $second < 3 ? 3 : $second; $this->view->set('urllist', $jumpurl); } $first = current($jumpurl); $jumpurl = $first['url']; } $this->view->set('status', $status); $this->view->set('waitsecond', $second); $this->view->set('message', $message); $this->view->set('msgtitle', $status ? '成功' : '失败'); if ($status) { $this->view->set('msgtype', 'success'); if ($jumpurl) { $this->view->set("jumpurl", $jumpurl); } elseif (!empty($_SERVER['HTTP_REFERER'])) { $this->view->set("jumpurl", $_SERVER["HTTP_REFERER"]); } else { $this->view->set('jumpurl', $_SERVER['REQUEST_URI']); } } else { $this->view->set('msgtype', 'error'); if ($jumpurl) { $this->view->set("jumpurl", $jumpurl); } elseif (!empty($_SERVER['HTTP_REFERER'])) { $this->view->set("jumpurl", '#back#'); } else { $this->view->set('jumpurl', $_SERVER['REQUEST_URI']); } } if ($this->config->get('tpl_message')) { $this->display($this->config->get('tpl_message')); } else { $this->display('message', 'common', $this->config->get('tpl_theme') ? $this->config->get('tpl_theme') : 'default'); } exit; } } public function ajax($data, $type = 'json') { switch (strtoupper($type)) { case 'JSON' : $data = $this->response->jsonEncode($data); break; case 'JSONP': $data = $this->response->jsonpEncode($data); break; case 'EVAL' : break; default : } $this->response->setBody($data, 'application/json'); exit; } public function redirect($url, $type = 302) { $this->response->redirect($url, $type); } } class controller extends PT_controller { }
class PT_Cookie extends PT_Base { protected $option; public function __construct($config=array()) { $this->option = array( 'prefix' => $this->config->get('cookie_prefix', 'PTCMS_'), 'expire' => intval($this->config->get('cookie_expire', 2592000)), 'path' => $this->config->get('cookie_path', '/'), 'domain' => $this->config->get('cookie_domain'), ); if (!$config) $this->option = array_merge($this->option, $config); } public function get($name, $default=null) { $name = $this->option['prefix'] . $name; if (isset($_COOKIE[$name])) { return $_COOKIE[$name]; } else { return $default; } } public function set($name, $value = '', $option = null) { if (!is_null($option)) { if (is_numeric($option)) $option = array('expire' => $option); elseif (is_string($option)) parse_str($option, $option); $config = array_merge($this->option, array_change_key_case($option)); } else { $config = $this->option; } $name = $this->option['prefix'] . $name; $expire = !empty($config['expire']) ? time() + $config['expire'] : 0; setcookie($name, $value, $expire, $config['path'], $config['domain']); $_COOKIE[$name] = $value; } public function rm($name) { $name = $this->option['prefix'] . $name; setcookie($name, '', time() - 3600, $this->option['path'], $this->option['domain']); unset($_COOKIE[$name]); } public function del($name) { $this->rm($name); } public function clear() { foreach ($_COOKIE as $key => $val) { if (0 === stripos($key, $this->option['prefix'])) { setcookie($key, '', time() - 3600, $this->option['prefix']['path'], $this->option['prefix']['domain']); unset($_COOKIE[$key]); } } return true; } } class cookie extends PT_cookie{}
class PT_Dispatcher extends PT_Base { public function run() { if (empty($_GET['s'])) { $_GET['m'] = empty($_GET['m']) ? $this->config->get('default_module', 'index') : $_GET['m']; $_GET['c'] = empty($_GET['c']) ? $this->config->get('default_controller', 'index') : $_GET['c']; $_GET['a'] = empty($_GET['a']) ? $this->config->get('default_action', 'index') : $_GET['a']; } else { $_GET['s'] = trim($_GET['s'], '/'); $this->router(); $this->parseSuperVar(); } $_GET['f'] = empty($_GET['f']) ? $this->config->get('default_format', 'html') : $_GET['f']; $mapModule = $this->config->get('map_module', array()); if (isset($mapModule[$_GET['m']])) { halt('当前模块已经改名', __FILE__, __LINE__ - 1); } elseif (in_array($_GET['m'], $mapModule)) { $_GET['_m'] = $_GET['m']; $_GET['m'] = array_search($_GET['m'], $mapModule); } foreach($_GET as &$v){ $v=trim(strip_tags($v)); } $_REQUEST = array_merge($_GET, $_POST); } public function parseSuperVar() { if (strpos($_GET['s'], '.')) { $param = explode('.', $_GET['s'], 2); $_GET['f'] = $param['1']; $param = explode('/', $param['0']); } else { $param = explode('/', $_GET['s']); } $var['m'] = isset($param['0']) ? array_shift($param) : $this->config->get('default_module', 'index'); $var['c'] = isset($param['0']) ? array_shift($param) : $this->config->get('default_controller', 'index'); $var['a'] = isset($param['0']) ? array_shift($param) : $this->config->get('default_action', 'index'); while ($k = each($param)) { $var[$k['value']] = current($param); next($param); }; $_GET = array_merge($var, $_GET); } public function router() { if ($router = $this->config->get('url_router')) { foreach ($router as $rule => $url) { if (preg_match('{' . $rule . '}isU', $_GET['s'], $match)) { unset($match['0']); if (0 === strpos($url, '/') || 0 === stripos($url, 'http://')) { header("Location: $url", true, 301); exit; } elseif (strpos($url, '?')) { list($url, $query) = explode('?', $url); } $_GET['s'] = rtrim($url, '/'); if ($match && !empty($query)) { $param = explode('&', $query); if (count($param) == count($match) && $var = array_combine($param, $match)) { $_GET = array_merge($_GET, $var); } } break; } } } } } class Dispatcher extends PT_Dispatcher{}
class PT_Input extends PT_Base { public function get($name, $type = 'int', $default = null) { return $this->param($name, $type, $default, $_GET); } public function post($name, $type = 'int', $default = null) { return $this->param($name, $type, $default, $_POST); } public function request($name, $type = 'int', $default = null) { return $this->param($name, $type, $default, $_REQUEST); } public function put($name, $type = 'int', $default = null) { static $input = null; if ($input === null) parse_str(file_get_contents('php://input'), $input); return $this->param($name, $type, $default, $input); } public function server($name, $type = 'int', $default = null) { return $this->param($name, $type, $default, $_SERVER); } public function globals($name, $type = 'int', $default = null) { return $this->param($name, $type, $default, $GLOBALS); } public function cookie($name, $type = 'int', $default = null) { return $this->param($this->config->get('cookie_prefix', '') . $name, $type, $default, $_COOKIE); } public function session($name, $type = 'int', $default = null) { return $this->param($name, $type, $default, $GLOBALS); } public function files($name, $type = 'int', $default = null) { return $this->param($name, $type, $default, $_FILES); } public function has($name, $type = 'request') { } public function param($name, $filter = 'int', $default = null, $param = array()) { $value = isset($param[ $name ]) ? $param[ $name ] : null; return $this->filter->filter($value, $filter, $default); } } class input extends PT_input{}
class PT_log extends PT_Base { public static $logstr = array(); public static function write($str, $type = 'pt') { $str = "[" . date('Y-m-d H:i:s') . "] " . $str . PHP_EOL; F(CACHE_PATH . '/log/' . $type . '_' . date('Ymd') . '.txt', $str, FILE_APPEND); } public static function record($str, $type = 'pt') { self::$logstr[$type][] = "[" . date('Y-m-d H:i:s') . "] " . $str . PHP_EOL; } public static function build() { foreach (self::$logstr as $type => $log) { $file = CACHE_PATH . '/log/' . $type . '_' . date('Ymd') . '.txt'; if (is_array($log)) { foreach ($log as $v) { F($file, $v, FILE_APPEND); } } else { F($file, $log, FILE_APPEND); } } } } class log extends PT_log{}
class PT_Model extends PT_Base { protected $table; protected $hasdb = false; protected static $_class = array(); protected static $_data = array(); protected $dbhand; public function __construct() { $classname=get_class($this); $name=strtolower(substr($classname,0,-5)); if (isset(self::$_model[$name])) return self::$_model[$name]; self::$_model[$name] = $this; if ($this->config->get('db_type')) $this->hasdb = true; } public function __call($method, $args) { if (!$this->dbhand && $this->pt->config->get('db_type')) { $name = $this->table ? $this->table : substr(get_class($this), 0, -5); $this->dbhand = $this->db($name); } if (method_exists($this->dbhand, $method)) { $res=call_user_func_array(array($this->dbhand, $method), $args); if (@is_subclass_of($res,'Driver_Db_Dao')) return $this; return $res; } $this->response->error('未定义的model操作', $method, 'f'); return false; } public function get($table, $id, $field = '') { $db = $this->db($table); if ($id == 0) return null; if (!isset(self::$_data[$table][$id])) { self::$_data[$table][$id] = $this->cache->get($table . '.' . $id); if (APP_DEBUG || self::$_data[$table][$id] === null) { self::$_data[$table][$id] = $db->find($id); if (self::$_data[$table][$id]) { if ($this->model($table) && method_exists($this->model($table), 'dataAppend')) { self::$_data[$table][$id] = $this->model($table)->dataAppend(self::$_data[$table][$id]); } } $this->cache->set($table . '.' . $id, self::$_data[$table][$id], $this->config->get('cache_time', 900)); } } if ($field !== '') { if (strpos($field, '.')) { $name = explode('.', $field); $value = self::$_data[$table][$id]; foreach ($name as $n) { if (isset($value[$n])) { $value = $value[$n]; } else { return null; } } return $value; } elseif (strpos($field, ',')) { return array_intersect_key(self::$_data[$table][$id], array_flip(explode(',', $field))); } else { if (isset(self::$_data[$table][$id][$field])) { return self::$_data[$table][$id][$field]; } else { return null; } } } return self::$_data[$table][$id]; } public function flush($table, $id, $field = ''){ $this->rm($table,$id); return $this->get($table,$id.$field); } public function set($table, $id, $data) { $db = $this->db($table); if (false!==$db->where(array($db->getPk() => $id))->update($data)) { return $this->rm($table, $id); } else { return false; } } public function rm($table, $id) { $this->cache->rm($table . '.' . $id); unset(self::$_data[$table][$id]); return true; } } class model extends PT_model{}
class PT_Request extends PT_Base { public function isGet() { if (defined('IS_GET')) { return IS_GET; } return $_SERVER['REQUEST_METHOD'] === 'GET' ? true : false; } public function isPost() { if (defined('IS_POST')) { return IS_POST; } return $_SERVER['REQUEST_METHOD'] === 'POST' ? true : false; } public function isAjax() { if (defined('IS_AJAX')) { return IS_AJAX; } return ((isset($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest') || !empty($_POST['isajax']) || !empty($_GET['isajax'])) ? true : false; } public function isMobile() { if (defined('IS_MOBILE')) return IS_MOBILE; if (isset ($_SERVER['HTTP_X_WAP_PROFILE'])) { return true; } if (isset ($_SERVER['HTTP_VIA'])) { if (stristr($_SERVER['HTTP_VIA'], "wap")) { return true; } } if (isset ($_SERVER['HTTP_USER_AGENT'])) { $clientkeywords = array('nokia', 'sony', 'ericsson', 'mot', 'samsung', 'htc', 'sgh', 'lg', 'sharp', 'sie-', 'philips', 'panasonic', 'alcatel', 'lenovo', 'iphone', 'ipod', 'blackberry', 'meizu', 'android', 'netfront', 'symbian', 'ucweb', 'windowsce', 'palm', 'operamini', 'operamobi', 'openwave', 'nexusone', 'cldc', 'midp', 'wap', 'mobile', 'UCBrowser'); if (preg_match("/(" . implode('|', $clientkeywords) . ")/i", strtolower($_SERVER['HTTP_USER_AGENT']))) { return true; } } if (isset ($_SERVER['HTTP_ACCEPT'])) { if ((strpos($_SERVER['HTTP_ACCEPT'], 'vnd.wap.wml') !== false) && (strpos($_SERVER['HTTP_ACCEPT'], 'text/html') === false || (strpos($_SERVER['HTTP_ACCEPT'], 'vnd.wap.wml') < strpos($_SERVER['HTTP_ACCEPT'], 'text/html')))) { return true; } } if($_SERVER['HTTP_HOST']==parse_url($this->config->get('wap_domain'),PHP_URL_HOST)){ return true; } return false; } public function isSpider($ua=null) { if (defined('IS_SPIDER')) return IS_SPIDER; empty($ua) && $ua = $_SERVER['HTTP_USER_AGENT']; $ua = strtolower($ua); $spiders = array('bot', 'crawl', 'spider', 'slurp', 'sohu-search', 'lycos', 'robozilla'); foreach ($spiders as $spider) { if (false !== strpos($ua, $spider)) return true; } return false; } public function getModuleName() { return MODULE_NAME; } public function getControllerName() { return CONTROLLER_NAME; } public function getActionNAME() { return ACTION_NAME; } public function getIp($default = '0.0.0.0') { $ip = $_SERVER['REMOTE_ADDR']; $i = explode('.', $ip); if ($i[0] == 10 || ($i[0] == 172 && $i[1] > 15 && $i[1] < 32) || ($i[0] == 192 && $i[1] == 168)) { $keys = array('HTTP_X_FORWARDED_FOR', 'HTTP_CLIENT_IP','HTTP_X_REAL_IP'); foreach ($keys as $key) { if (empty($_SERVER[$key])) continue; $ips = explode(',', $_SERVER[$key], 1); $ip = $ips[0]; break; } } $l = ip2long($ip); if ((false !== $l) && ($ip === long2ip($l))) return $ip; return $default; } public static function getSiteCode($domain = null) { $domain = ($domain !== null) ? (strpos($domain, '://') ? parse_url($domain, PHP_URL_HOST) : $domain) : $_SERVER['HTTP_HOST']; $domain = str_replace('-', '_', $domain); if (strpos($domain, ':') !== false) $domain = substr($domain, 0, strpos($domain, ':')); if (stripos($domain, 'www.') === 0) $domain = substr($domain, 4); return strtolower($domain); } } class request extends PT_request { }
defined('JSON_PRETTY_PRINT') || define('JSON_PRETTY_PRINT', 128); defined('JSON_UNESCAPED_UNICODE') || define('JSON_UNESCAPED_UNICODE', 256); class PT_Response extends PT_Base { protected $autoRender = true; public function setHeader($mimeType = 'text/html') { if ($this->config->get('gzip_encode', false)) { $zlib = ini_get('zlib.output_compression'); if (empty($zlib)) ob_start('ob_gzhandler'); } if (!headers_sent()) { header("Content-Type: $mimeType; charset=utf-8"); header("Cache-control: private"); header("X-Powered-By: XScms Studio (www.677a.cn)"); if (strpos($mimeType, 'json')) { header('Access-Control-Allow-Origin:*'); header('Access-Control-Allow-Headers:accept, content-type'); } } } public function setBody($content = '', $mimeType = 'text/html') { if (!headers_sent()) { $this->setHeader($mimeType); } echo $content; } public function disableRender() { $this->autoRender = false; } public function enableRender() { $this->autoRender = true; } public function isAutoRender() { return $this->autoRender; } public function jsonEncode($data, $format = 0) { if (APP_DEBUG && $format == 0) { $format = JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE; return json_encode($data, $format); } return json_encode($data); } public function jsonpEncode($data, $format = 0) { $callback = $this->input->get($this->config->get('jsonp_callback'), 'en', 'ptcms_jsonp'); if (APP_DEBUG && $format == 0) { $format = JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE; return $callback . '(' . json_encode($data, $format) . ');'; } return $callback . '(' . json_encode($data) . ');'; } public function xmlEncode($data, $root = 'ptcms', $attr = '', $encoding = 'utf-8') { return $this->load('xml')->encode($data, $root, $attr, $encoding); } public function error($msg = '找不到指定的页面', $level = 'f') { header('HTTP/1.1 404 Not Found'); header("status: 404 Not Found"); if (APP_DEBUG) { halt($msg); } else { if ($level != 'f') { $this->controller->error($msg, 0, 0); } else { $file = PT_ROOT . '/' . $this->config->get('404file', '404.html'); $this->log->write($msg); if (is_file($file)) { $content = F($file); $content = str_replace(array('{$sitename}', '{$siteurl}', '{$msg}'), array($this->config->get('sitename', 'PTCMS FrameWork'), $this->config->get('siteurl', PT_URL), $msg), $content); exit($content); } else { exit($msg . ' 页面出现错误，如需自定义此错误，请创建文件：' . $file); } } } exit; } public function _empty($msg) { if (APP_DEBUG) { $this->error($msg, '', 0); } else { halt($msg); } } public function redirect($url, $type = 302) { if (!headers_sent()) { if ($type == 302) { header('HTTP/1.1 302 Moved Temporarily'); header('Status:302 Moved Temporarily'); } else { header('HTTP/1.1 301 Moved Permanently'); header('Status:301 Moved Permanently'); } } header('Location: ' . $url); exit; } public function runinfo() { if ($this->config->get('is_gen_html')) return ''; $tpl = $this->config->get('runinfo', 'Power by PTCMS, Processed in {time}(s), Memory usage: {mem}MB.'); $from[] = '{time}'; $to[] = number_format(microtime(true) - $GLOBALS['_startTime'], 3); $from[] = '{mem}'; $to[] = number_format((memory_get_usage() - $GLOBALS['_startUseMems']) / 1024 / 1024, 3); if (strpos($tpl, '{net}')) { $from[] = '{net}'; $to[] = $GLOBALS['_apinum']; } if (strpos($tpl, '{file}')) { $from[] = '{file}'; $to[] = count(get_included_files()); } if (strpos($tpl, '{sql}')) { $from[] = '{sql}'; $to[] = $GLOBALS['_sqlnum']; } if (strpos($tpl, '{cacheread}')) { $from[] = '{cacheread}'; $to[] = $GLOBALS['_cacheRead']; } if (strpos($tpl, '{cachewrite}')) { $from[] = '{cachewrite}'; $to[] = $GLOBALS['_cacheWrite']; } $runtimeinfo = str_replace($from, $to, $tpl); return $runtimeinfo; } public function download($con, $name, $type = 'file') { $length = ($type == 'file') ? filesize($con) : strlen($con); header("Content-type: application/octet-stream"); header("Accept-Ranges: bytes"); header("Content-Length: " . $length); header('Pragma: cache'); header('Cache-Control: public, must-revalidate, max-age=0'); header('Content-Disposition: attachment; filename="' . urlencode($name) . '"; charset=utf-8'); header("Content-Transfer-Encoding: binary "); if ($type == 'file') { readfile($con); } else { echo $con; } } } class response extends PT_response { }
class PT_Session { protected $pt; public function __construct() { $this->pt = PT_Base::getInstance(); } public function start($name = array()) { $name = array_merge($this->pt->config->get('session', array()), $name); if ($this->pt->config->get('var_session_id') && isset($_REQUEST[$this->pt->config->get('var_session_id')])) { session_id($_REQUEST[$this->pt->config->get('var_session_id')]); } elseif (isset($name['id'])) { session_id($name['id']); } if (empty($name['type']) && $this->pt->config->get('driver_session')) { $name['type'] = $this->pt->config->get('driver_session'); } if (isset($name['name'])) session_name($name['name']); if (isset($name['path'])) session_save_path($name['path']); if (isset($name['domain'])) ini_set('session.cookie_domain', $name['domain']); if (isset($name['expire'])) ini_set('session.gc_maxlifetime', $name['expire']); if (isset($name['use_trans_sid'])) ini_set('session.use_trans_sid', $name['use_trans_sid'] ? 1 : 0); if (isset($name['use_cookies'])) ini_set('session.use_cookies', $name['use_cookies'] ? 1 : 0); if (isset($name['cache_limiter'])) session_cache_limiter($name['cache_limiter']); if (isset($name['cache_expire'])) session_cache_expire($name['cache_expire']); if (isset($name['type'])) { $type = $name['type']; $class = 'Driver_Session_' . $type; $hander = new $class(); session_set_save_handler( array(&$hander, "open"), array(&$hander, "close"), array(&$hander, "read"), array(&$hander, "write"), array(&$hander, "destroy"), array(&$hander, "gc")); } session_start(); } public function __set($name, $value) { return $this->set($name, $value); } public function __get($name) { return $this->get($name); } public function get($name = '', $default = null) { if ($name == '') return $_SESSION; if (strpos($name, '.')) { $c = $_SESSION; $fields = explode('.', $name); foreach ($fields as $field) { if (!isset($c[$field])) return $default; $c = $c[$field]; } return $c; } elseif (isset($_SESSION[$name])) { return $_SESSION[$name]; } else { return $default; } } public function set($key, $value = '') { $_SESSION[$key] = $value; return true; } public function rm($key) { if (!isset($_SESSION[$key])) { return false; } unset($_SESSION[$key]); return true; } public static function clear() { $_SESSION = array(); } public static function destory() { if (session_id()) { unset($_SESSION); session_destroy(); } } public static function close() { if (session_id()) { session_write_close(); } } } class session extends PT_session { }
class PT_Storage extends PT_Base { protected static $handler = null; static public function getInstance($type = '') { $type = $type ? $type : PT_Base::getInstance()->config->get('storage_type', 'file') . '_' . PT_Base::getInstance()->config->get('storage_path', 'storage'); if (empty(self::$handler[$type])) { $class = 'Driver_Storage_' . PT_Base::getInstance()->config->get('storage_type'); self::$handler[$type] = new $class(PT_Base::getInstance()->config->get('storage_option', array())); } return self::$handler[$type]; } public static function exist($file) { return self::getInstance()->exist($file); } public static function write($file, $content) { if ($content !== false) return self::getInstance()->write($file, $content); return false; } public static function read($file) { return self::getInstance()->read($file); } public static function append($file, $content) { if ($content !== false) return self::getInstance()->read($file, $content); return false; } public static function remove($file) { return self::getInstance()->remove($file); } public static function getUrl($file) { return self::getInstance()->getUrl($file); } public static function getPath($file) { return self::getInstance()->getPath($file); } public static function error() { return self::getInstance()->error(); } } class storage extends PT_storage{}
class PT_Plugin extends PT_Base { protected $pt; public static $_tags = array(); public function __construct() { $this->pt=PT_Base::getInstance(); } public static function call($tag, &$param = null) { if (isset(self::$_tags[$tag])) { foreach (self::$_tags[$tag] as $name) { $classname = $name . 'Plugin'; $handler = new $classname(); $handler->run($param); } } } public static function register(array $data) { foreach ($data as $tag => $var) { self::add($tag, $var); } } public static function add($tag, $var) { if (!is_array($var)) $var = array($var); if (isset(self::$_tags[$tag])) { self::$_tags[$tag] = array_unique(array_merge(self::$_tags[$tag], $var)); } else { self::$_tags[$tag] = $var; } } public static function del($tag, $var) { if (isset(self::$_tags[$tag])) { $key = array_search($var, self::$_tags[$tag]); if ($key !== false) { unset(self::$_tags[$tag][$key]); } if (empty(self::$_tags[$tag])) unset(self::$_tags[$tag]); } } public static function get($tag = '') { if (empty($tag)) return self::$_tags; if (isset(self::$_tags[$tag])) { return self::$_tags[$tag]; } else { return array(); } } public static function getlist() { $list = array(); foreach (self::$_tags as $v) { $list = array_merge($list, $v); } return array_unique($list); } public function loadconfig() { $name = substr(get_class($this), 0, -6); $list=pt::import(APP_PATH.'/common/plugin/'.$name.'/config.php'); if ($list){ $config=array(); foreach($list as $v){ $config[$v['key']]=$v['value']; } $this->pt->config->set(array('pluginconfig'=>$config)); return $config; } return array(); } } class plugin extends PT_plugin{}
class PT_View { protected $_tpl_vars = array(); protected $tplpath = TPL_PATH; protected $tplfile = ''; protected $tplfilepath = ''; protected $theme = ''; protected $pt; public function __construct() { $this->pt=PT_Base::getInstance(); PT_Plugin::call('view_start'); $this->getTheme(); } public function setFile($file) { $this->tplfile = $file; } public function setPath($path) { $this->tplpath = $path; } public function getTheme() { $this->theme = $this->pt->config->get('tpl_theme', 'default'); if ($this->theme) { if (isset($_GET['t'])) { $auto = $_GET['t']; $this->pt->cookie->set('THEME', $auto, 25920000); } elseif ($this->pt->cookie->get('THEME')) { $auto = $this->pt->cookie->get('THEME'); } if (isset($auto)) { if (is_dir($this->tplpath . '/' . $auto)) { $this->theme = $auto; $this->pt->config->set('tpl_theme', $this->theme); } else { $this->pt->cookie->del('THEME'); } } if ($tplconfig = pt::import($this->tplpath . '/' . $this->theme . '/config.php')) { foreach ($tplconfig as $k => $v) { $this->pt->config->set("tplconfig.{$k}", $v['value']); } } } return $this->theme; } public function set($var, $value = null) { if (is_array($var)) { $this->_tpl_vars = array_merge($this->_tpl_vars, $var); } else { $this->_tpl_vars[$var] = $value; } return $this; } public function get($var = '') { if ($var == '') return $this->_tpl_vars; if (isset($this->_tpl_vars[$var])) return $this->_tpl_vars[$var]; if (strpos($var, '.') !== false) { $arr = explode('.', $var); $tmp = $this->_tpl_vars; foreach ($arr as $v) { if (substr($v, 0, 1) === '$') $v = $this->get($v); $tmp = $tmp[$v]; } if (!empty($tmp)) { return $tmp; } } return null; } public function __set($name, $var) { if (!is_object($var)) return $this->set($name, $var); return false; } public function __get($name) { if (isset($this->_tpl_vars[$name])){ return $this->_tpl_vars[$name]; } return null; } public function fetch($tpl = null, $module = null, $theme = null) { $this->tplfilepath = $this->getTplFile($tpl, $module, $theme); extract($this->_tpl_vars, EXTR_OVERWRITE); ob_start(); include $this->checkCompile(); $content = ob_get_contents(); ob_end_clean(); return $content; } protected function getTplFile($tpl, $module = null, $theme = null) { $tpl = ($tpl === null) ? $this->tplfile : $tpl; $theme = ($theme === null) ? $this->theme : $theme; $module = ($module === null) ? MODULE_NAME : $module; if (substr($tpl, 0, 1) === '/') { $tplfile = PT_ROOT . $tpl; $tmpl = $this->tplpath . "/{$theme}/" . $this->pt->config->get("tpl_public", 'public'); } else { if (!$tpl) { $tpl = CONTROLLER_NAME . '_' . ACTION_NAME; } $protect = $this->pt->config->get('tpl_protect', ''); $suffix = $this->pt->config->get('tpl_suffix', 'html'); if ($theme) { $tplfile = rtrim($this->tplpath . ($protect?"/{$theme}/{$protect}/{$module}":"/{$theme}/{$module}"), '/') . "/{$tpl}.{$suffix}"; if (!is_file($tplfile)) { if (is_file($this->tplpath . "/{$theme}/{$module}/{$tpl}.{$suffix}")) { $tplfile = $this->tplpath . "/{$theme}/{$module}/{$tpl}.{$suffix}"; $this->pt->log->record('指定的模版（' . $tplfile . '）不存在，尝试使用' . $tplfile . '模版成功'); } elseif ($theme !== 'default' && is_file($this->tplpath . "/default/{$module}/{$tpl}.{$suffix}")) { $this->pt->log->record('指定的模版（' . $tplfile . '）不存在，尝试使用默认模版成功'); $tplfile = $this->tplpath . "/default/{$module}/{$tpl}.{$suffix}"; $theme = 'default'; } } $tmpl = $this->tplpath . "/{$theme}/" . $this->pt->config->get("tpl_public", 'public'); } else { $tplfile = APP_PATH . "/{$module}/view/{$tpl}.{$suffix}"; $tmpl = APP_PATH . "/{$module}/view/"; } } $realtpl = str_replace('\\', '/', realpath($tplfile)); if (!$realtpl) { if (APP_DEBUG){ halt("模版{$tpl}不存在:" . $tplfile); }else{ $this->pt->response->error("模版{$tpl}不存在"); } } defined('__TMPL__') || define('__TMPL__', rtrim(PT_DIR . str_replace(PT_ROOT, '', $tmpl), '/')); return $realtpl; } protected function checkCompile() { $tplfile = ltrim(str_replace(array(PT_ROOT, '/application/', '/template/'), '/', $this->tplfilepath), '/'); $compiledFile = CACHE_PATH . '/template/' . substr(str_replace('/', ',', $tplfile), 0, -5) . '.php'; if (APP_DEBUG || !is_file($compiledFile) || filemtime($compiledFile) < filemtime($this->tplfilepath)) { $content = F($this->tplfilepath); $this->pt->plugin->call('template_compile_start', $content); $driverclass = 'Driver_View_' . $this->pt->config->get('view_driver', 'Mc'); $driver = new $driverclass(); $content = $driver->compile($content); if ($this->pt->config->get('layout', false)) { $includeFile = $this->getTplFile($this->pt->config->get('layout_name', 'layout')); $layout = $driver->compile(F($includeFile)); $content = str_replace('__CONTENT__', $content, $layout); } $content = '<?php defined(\'PT_ROOT\') || exit(\'Permission denied\');?>' . $this->replace($content); $this->pt->plugin->call('template_compile_end', $content); F($compiledFile, $content); } return $compiledFile; } protected function replace($content) { $replace = array( '__TMPL__' => '<?php echo __TMPL__;?>', '__ROOT__' => '<?php echo PT_DIR;?>', '__APP__' => '<?php echo __APP__;?>', '__MODULE__' => '<?php echo __MODULE__;?>', '__ACTION__' => '<?php echo __ACTION__;?>', '__SELF__' => '<?php echo __SELF__;?>', '__URL__' => '<?php echo  __URL__;?>', '__DIR__' => '<?php echo PT_DIR;?>', '__PUBLIC__' => '<?php echo PT_DIR;?>' . '/public', '__RUNINFO__' => '<?php echo $this->pt->response->runinfo();?>', ); $content = strtr($content, $replace); return $content; } } function defaultvar() { $args = func_get_args(); $value = array_shift($args); if(!is_numeric($value)){ return $value; }elseif (isset($args[$value])) { return $args[$value]; } else { return ''; } } function datevar($time, $format) { if ($time == '0') return ''; return date($format, $time); } function parseTpl($content) { if ($content=='') return ''; $cachefile = CACHE_PATH . '/template/parsetpl/' . md5($content) . '.php'; if (!is_file($cachefile)) { $driverclass = 'Driver_View_' . PT_Base::getInstance()->config->get('view_driver', 'Mc'); $driver = new $driverclass(); $content = $driver->compile($content); F($cachefile, $content); } return $cachefile; } class view extends PT_view{}
class PT_Db{ protected $pt; protected static $_config; protected static $_class; public function __construct(){ $this->pt=PT_Base::getInstance(); } public function getInstance($name='') { if (self::$_config == array()) { self::$_config = $this->parseConfig(); } $name=($name=='')?'__empty__':$name; if (empty(self::$_class[$name])){ $class='Driver_Db_'.self::$_config['type'].'_dao'; self::$_class[$name]=new $class(self::$_config,$name); } return self::$_class[$name]; } public function table($name='') { return $this->getInstance($name); } public function parseConfig() { $config_params['type']=$this->pt->config->get('db_type', 'mysql'); switch($config_params['type']){ case 'mysql': $config_params['master'] = array( array( 'host' => $this->pt->config->get('db_mysql_master_host', $this->pt->config->get('mysql_master_host','localhost')), 'port' => $this->pt->config->get('db_mysql_master_port', $this->pt->config->get('mysql_master_port','3306')), 'name' => $this->pt->config->get('db_mysql_master_name', $this->pt->config->get('mysql_master_name','ptcms')), 'user' => $this->pt->config->get('db_mysql_master_user', $this->pt->config->get('mysql_master_user','root')), 'pwd' => $this->pt->config->get('db_mysql_master_pwd', $this->pt->config->get('mysql_master_pwd','')), ) ); if ($this->pt->config->get('db_mysql_salve_host')){ $config_params['singleton']=false; $config_params['slave'] = array( array( 'host' => $this->pt->config->get('db_mysql_salve_host', 'localhost'), 'port' => $this->pt->config->get('db_mysql_salve_port', '3306'), 'name' => $this->pt->config->get('db_mysql_salve_name', 'ptcms'), 'user' => $this->pt->config->get('db_mysql_salve_user','root'), 'pwd' => $this->pt->config->get('db_mysql_salve_pwd', ''), ) ); }else{ $config_params['singleton']=true; $config_params['slave'] = $config_params['master']; } $config_params['driver']=$this->pt->config->get('db_mysql_driver', $this->pt->config->get('mysql_driver','pdo')); $config_params['prefix']=$this->pt->config->get('db_mysql_prefix', $this->pt->config->get('mysql_prefix','ptcms_')); $config_params['charset']=$this->pt->config->get('db_mysql_charset', 'utf8'); break; } return $config_params; } } class db extends PT_db{}
class Driver_Db_Dao { protected $pt; protected $tableName = null; protected static $driver = null; protected $fields = array(); protected $pk = null; protected static $prefix = null; protected $cachePath = null; protected $parts = array(); protected $errorinfo = null; protected static $_config = array(); protected static $master = null; protected static $slave = null; protected $sql = ''; protected $data = array(); public function __construct($config, $tablename = '') { $this->cachePath = CACHE_PATH . '/fields'; $this->pt = PT_Base::getInstance(); self::$_config = $config; if ($tablename) { $this->setTable($tablename); } } public function __call($method, $args) { $this->pt->response->error('不具备的Model操作' . $method); } public function sum($value = '') { $value = empty($value) ? '*' : $value; $this->parts['field'] = "sum({$value}) as pt_num"; return $this->getField('pt_num'); } public function avg($value = '') { $value = empty($value) ? '*' : $value; $this->parts['field'] = "avg({$value}) as pt_num"; return $this->getField('pt_num'); } public function min($value = '') { $value = empty($value) ? '*' : $value; $this->parts['field'] = "min({$value}) as pt_num"; return $this->getField('pt_num'); } public function max($value = '') { $value = empty($value) ? '*' : $value; $this->parts['field'] = "max({$value}) as pt_num"; return $this->getField('pt_num'); } public function count($value = '') { $value = empty($value) ? '*' : $value; $this->parts['field'] = "count({$value}) as pt_num"; return $this->getField('pt_num'); } public function where($v) { if (is_string($v)) { $this->parts['where'][] = array('_string' => $v); } elseif (is_array($v)) { foreach ($v as $field => $var) { $this->parts['where'][] = array($field => $var); } } return $this; } public function option($value) { if (isset($value['where'])) $value['where'] = array($value['where']); $this->parts = $value; return $this; } public function data($value) { $this->data = $value; return $this; } public function database($value) { $this->parts['db'] = $value; return $this; } public function distinct($value) { $this->parts['distinct'] = $value; return $this; } public function table($value) { $this->parts['table'] = $value; return $this; } public function having($value) { $this->parts['having'] = $value; return $this; } public function group($value) { $this->parts['group'] = $value; return $this; } public function page($value) { $this->parts['page'] = $value; return $this; } public function limit($value) { $this->parts['limit'] = $value; return $this; } public function order($value) { $this->parts['order'] = $value; return $this; } public function field($value) { $this->parts['field'] = $value; return $this; } public function join($table, $on = array(), $type = 'left') { if (is_array($table)) { $this->parts['join'] = $table; } else { $this->parts['join'] = array('table' => $table, 'on' => $on, 'type' => $type); } return $this; } public function setTable($tablename) { $this->tableName = self::$_config['prefix'] . strtolower($tablename); $this->getTableField(); } protected function master() { if (self::$master) { return self::$master; } $driverclass = 'Driver_Db_' . self::$_config['type'] . '_' . self::$_config['driver']; $config = self::$_config['master'][array_rand(self::$_config['master'])]; $config['charset'] = self::$_config['charset']; self::$master = new $driverclass($config); if (self::$_config['singleton']) self::$slave = self::$master; return self::$master; } protected function slave() { if (self::$slave) { return self::$slave; } $driverclass = 'Driver_Db_' . self::$_config['type'] . '_' . self::$_config['driver']; $config = self::$_config['slave'][array_rand(self::$_config['slave'])]; $config['charset'] = self::$_config['charset']; self::$slave = new $driverclass($config); if (self::$_config['singleton']) self::$master = self::$slave; return self::$slave; } public function getTableField($tablename = '') { $tablename = empty($tablename) ? $this->tableName : $tablename; if (!$tablename) { halt('您必须设置表名后才可以使用该方法'); } $data = $this->pt->cache->get('tablefield_' . $tablename); if (!APP_DEBUG && !empty($data['0'])) { list($this->pk, $this->fields) = $data; } else { $pks = $fields = array(); $db = $this->slave(); if ($tableInfo = (array)$db->fetchAll("SHOW FIELDS FROM {$tablename}")) { foreach ($tableInfo as $v) { if ($v['Key'] == 'PRI') $pks[] = strtolower($v['Field']); $fields[] = strtolower($v['Field']); } $this->pk = empty($pks) ? '' : $pks['0']; $this->fields = $fields; if (!APP_DEBUG) { $cacheData = array($this->pk, $this->fields); $this->pt->cache->set('tablefield_' . $tablename, $cacheData); } } else { halt('获取表' . $tablename . '信息发送错误 ' . $db->error()); return false; } } return $this->fields; } public function getPk() { if ($this->pk === null) $this->getTableField(); return $this->pk; } public function insert($data = array(), $replace = false) { if (!empty($data)) $this->data = array_merge($this->data, array_change_key_case($data)); if ($this->tableName || $this->parts['table']) { foreach ($this->data as $k => $v) { if (in_array($k, $this->fields)) $this->data[$k] = $this->parseValue($v); else unset($this->data[$k]); } $fields = array_map(array($this, 'parseKey'), array_keys($this->data)); $this->sql = ($replace ? 'REPLACE' : 'INSERT') . ' INTO ' . $this->parseTable() . '(' . implode(',', $fields) . ') VALUES (' . implode(',', $this->data) . ');'; $this->data = $this->parts = array(); $this->errorinfo = ''; $db = $this->master(); if ($db->execute($this->sql)) { return $db->insertId(); } else { $this->errorinfo = $db->errno() . ':' . $db->error(); return false; } } else { halt('insert操作必须设置要操作的表'); return false; } } public function insertAll($datas, $replace = false) { if (!is_array($datas[0])) return false; if ($this->tableName || $this->parts['table']) { $values = array(); foreach ($datas as $data) { $value = array(); foreach ($data as $key => $val) { if (in_array($key, $this->fields)) $value[$key] = $this->parseValue($val); } $values[] = '(' . implode(',', $value) . ')'; } $fields = array_map(array($this, 'parseKey'), array_keys($datas[0])); $this->sql = ($replace ? 'REPLACE' : 'INSERT') . ' INTO ' . $this->parseTable() . ' (' . implode(',', $fields) . ') VALUES ' . implode(',', $values); $this->data = $this->parts = array(); $this->errorinfo = ''; $db = $this->master(); if ($db->execute($this->sql)) { return $db->insertId(); } else { $this->errorinfo = $db->errno() . ':' . $db->error(); return false; } } else { halt('insert操作必须设置要操作的表'); return false; } } public function update($data = array()) { if (!empty($data)) $this->data = array_merge($this->data, array_change_key_case($data)); if ($this->tableName || $this->parts['table']) { $sets = array(); if (!empty($this->data[$this->pk])) { $this->parts['where'][] = array($this->pk => $this->data[$this->pk]); unset($this->data[$this->pk]); } if (empty($this->parts['field'])) { $fields = $this->fields; } else { $fields = is_string($this->parts['field']) ? explode(',', $this->parts['field']) : $this->parts['field']; } foreach ($this->data as $k => $v) { if (in_array($k, $fields)) { $sets[] = $this->parseKey($k) . '=' . $this->parseValue($v); } } $this->sql = 'UPDATE ' . $this->parseTable() . ' SET ' . implode(',', $sets) . $this->parseWhere() . $this->parseOrder() . $this->parseLimit(); $this->data = $this->parts = array(); $this->errorinfo = ''; $db = $this->master(); $affectRow = $db->execute($this->sql); if ($affectRow === false) { $this->errorinfo = $db->errno() . ':' . $db->error(); return false; } else { return $affectRow; } } else { halt('update操作必须设置要操作的表'); return false; } } public function delete() { if (!empty($data)) $this->data = array_merge($this->data, array_change_key_case($data)); if ($this->tableName || $this->parts['table']) { $this->sql = 'DELETE FROM' . $this->parseTable() . $this->parseWhere() . $this->parseOrder() . $this->parseLimit(); $this->data = $this->parts = array(); $this->errorinfo = ''; $db = $this->master(); $affectRow = $db->execute($this->sql); if ($affectRow === false) { $this->errorinfo = $db->errno() . ':' . $db->error(); return false; } else { return $affectRow; } } else { halt('update操作必须设置要操作的表'); return false; } } public function find($id = null) { if (is_scalar($id)) $this->parts['where'][] = array($this->pk => $id); $this->parts['limit'] = 1; $this->sql = "SELECT " . $this->parseField() . ' FROM ' . $this->parseTable() . ' as a' . $this->parseJoin() . $this->parseWhere() . $this->parseGroup() . $this->parseHaving() . $this->parseOrder() . $this->parseLimit() . $this->parseUnion(); $this->data = $this->parts = array(); $this->errorinfo = ''; $db = $this->slave(); $row = $db->fetch($this->sql); if ($row === false) { $this->errorinfo = $db->errno() . ':' . $db->error(); } else { if (!$row) { $row = null; } } return $row; } public function select() { $this->sql = "SELECT " . $this->parseField() . ' FROM ' . $this->parseTable() . 'as a' . $this->parseJoin() . $this->parseWhere() . $this->parseGroup() . $this->parseHaving() . $this->parseOrder() . $this->parseLimit() . $this->parseUnion(); $this->data = $this->parts = array(); $this->errorinfo = ''; $db = $this->slave(); $row = $db->fetchAll($this->sql); if ($row === false) { $this->errorinfo = $db->errno() . ':' . $db->error(); } else { if (!$row) { $row = array(); } } return $row; } public function getField($field, $isArr = false) { if (empty($this->parts['field'])) $this->parts['field'] = $field; if ($isArr) { $row = $this->select(); if ($row === false || $row === null) return $row; else { $res = array(); if ($field !== true && strpos($field, ',') === false) { foreach ($row as $v) { $res[] = $v[$field]; } } else { foreach ($row as $v) { $res[current($v)] = (count($v) == 1) ? current($v) : $v; } } return $res; } } else { $row = $this->find(); if ($row === false || $row === null) return $row; elseif ($field === true) return current($row); elseif (isset($row[$field])) return $row[$field]; else return ''; } } public function setField($field, $data) { if (is_array($field)) { $this->data = $field; } elseif (is_string($field)) { $this->data[$field] = $data; } $this->update(); } public function setInc($field, $step = 1) { $this->setField($field, array('exp', "{$field}+{$step}")); } public function setDec($field, $step = 1) { $this->setField($field, array('exp', "{$field}-{$step}")); } protected function parseKey(&$key) { $key = trim($key); if (!preg_match('/[,\'\"\*\(\)`.\s]/', $key)) { $key = '`' . $key . '`'; } return $key; } protected function parseValue($value) { if (is_string($value)) { $value = '\'' . $this->master()->escapeString($value) . '\''; } elseif (isset($value[0]) && is_string($value[0]) && strtolower($value[0]) == 'exp') { $value = $this->master()->escapeString($value[1]); } elseif (is_array($value)) { $value = array_map(array($this, 'parseValue'), $value); } elseif (is_bool($value)) { $value = $value ? '1' : '0'; } elseif (is_null($value)) { $value = 'null'; } return $value; } public function getLastSql() { return $this->sql; } public function getError() { return $this->errorinfo; } protected function parseWhere() { if (empty($this->parts['where'])) return ' WHERE 1'; return ' WHERE ' . $this->parseWhereCondition($this->parts['where']); } protected function parseWhereCondition($condition) { $logic = ' AND '; $wheres = array(); foreach ($condition as $var) { $k = key($var); $v = current($var); if (in_array($k, $this->fields, true)) { if(empty($this->parts['join'])){ $wheres[] = '(' . $this->parseWhereItem($this->parseKey($k), $v) . ')'; }else{ $wheres[] = '(' . $this->parseWhereItem('a.'.$this->parseKey($k), $v) . ')'; } } elseif ($k == '_logic' && in_array(strtolower($v), array('or', 'and', 'xor'))) { $logic = ' ' . strtoupper($v) . ' '; } elseif ($k == '_string') { $wheres[] = '(' . $v . ')'; } else { } } return ($wheres === array()) ? 1 : implode($logic, $wheres); } protected function parseWhereItem($field, $var) { if (is_array($var)) { if (isset($_REQUEST[$field]) && is_array($_REQUEST[$field])) return $field . ' = ' . $this->parseValue(strval($var)); switch (strtolower($var['0'])) { case '>': case '<': case '>=': case '<=': case '=': case '<>': case 'like': case 'not like': return $field . ' ' . $var['0'] . ' ' . $this->parseValue($var['1']); case 'in': case 'not in': if (empty($var['1'])) return '1'; if (is_array($var['1'])) { $var['1'] = implode(',', $this->parseValue($var['1'])); } return "{$field} {$var['0']} ( {$var['1']} )"; case 'between': case 'not between': if (is_string($var['1'])) $var['1'] = explode(',', $var['1']); $var['1'] = $this->parseValue($var['1']); return "{$field} {$var['0']} {$var['1']['0']} and {$var['1']['1']}"; case 'exp': return "{$field} {$var['1']}"; default: return '1'; } } else { return $field . ' = ' . $this->parseValue($var); } } protected function parseOrder() { if (!empty($this->parts['order'])) { if (is_string($this->parts['order'])) { return ' ORDER BY ' . $this->parts['order']; } } return ''; } protected function parseGroup() { if (!empty($this->parts['group'])) { if (is_string($this->parts['group'])) { return ' GROUP BY ' . $this->parseKey($this->parts['group']); } elseif (is_array($this->parts['group'])) { array_walk($this->parts['group'], array($this, 'parseKey')); return ' GROUP BY ' . implode(',', $this->parts['group']); } } return ''; } protected function parseHaving() { if (empty($this->parts['having'])) return ''; return ' HAVING ' . $this->parseWhereCondition($this->parts['having']); } protected function parseLimit() { if (isset($this->parts['page'])) { if (strpos($this->parts['page'], ',')) { list($page, $listRows) = explode(',', $this->parts['page']); } else { $page = $this->parts['page']; } $page = $page ? $page : 1; $listRows = isset($listRows) ? $listRows : (is_numeric($this->parts['limit']) ? $this->parts['limit'] : 20); $offset = $listRows * ((int)$page - 1); return ' LIMIT ' . $offset . ',' . $listRows; } elseif (!empty($this->parts['limit'])) { return ' LIMIT ' . $this->parts['limit']; } else { return ''; } } protected function parseUnion() { } protected function parseJoin() { if (empty($this->parts['join'])) return ''; $table=$this->parts['join']['table']; $type=$this->parts['join']['type']; $on=$this->parts['join']['on']; if (empty($table)) { return ''; } elseif (strpos($table, self::$_config['prefix']) === false) { $table = self::$_config['prefix'] . $table; } if (empty($on)) { $on = 'a.' . $this->pk . ' = b.' . $this->pt->model(str_replace(self::$_config['prefix'], '', $table))->getPk(); } return ' '.$type . ' JOIN ' . $table . ' as b ON ' . $on; } protected function parseField() { if (empty($this->parts['field'])) { return '*'; } else { if (is_string($this->parts['field'])) { $this->parts['field'] = explode(',', $this->parts['field']); } array_walk($this->parts['field'], array($this, 'parseKey')); return implode(',', $this->parts['field']); } } protected function parseTable() { if (empty($this->parts['table'])) { if ($this->tableName) { $table = $this->tableName; } else { trigger_error('必须设置表才可以进行此操作', E_USER_ERROR); return false; } } else { $table = strtolower(strpos($this->parts['table'], self::$_config['prefix']) === false) ? self::$_config['prefix'] . $this->parts['table'] : $this->parts['table']; } $table = $this->parseKey($table); return ((empty($this->parts['db'])) ? $table : $this->parseKey($this->parts['db']) . '.' . $table); } protected function parseDistinct() { return $this->parts['distinct'] ? ' DISTINCT ' : ''; } public function parseCount($method) { $this->parts['field'] = "{$method}({$this->parts['field']}) as pt_num"; return $this->getField('pt_num'); } public function start() { $this->master()->startTrans(); } public function commit() { $this->master()->commit(); } public function rollback() { $this->master()->rollback(); } public function fetch($sql) { $this->errorinfo = ''; $db = $this->slave(); $row = $db->fetch($sql);; if ($row!==false) { if ($row) { return $row; } else { return null; } } else { $this->errorinfo = $db->errno() . ':' . $db->error(); return false; } } public function fetchall($sql) { $this->errorinfo = ''; $db = $this->slave(); $row = $db->fetchall($sql);; if ($row!==false) { if ($row) { return $row; } else { return null; } } else { $this->errorinfo = $db->errno() . ':' . $db->error(); return false; } } public function query($sql) { $this->errorinfo = ''; if (self::$_config['prefix'] != 'ptcms_' && strpos($sql, 'ptcms_')) { $sql = str_replace('ptcms_', self::$_config['prefix'], $sql); } $db = $this->slave(); $row = $db->query($sql);; if (!$db->error()) { if ($row || $row === 0) { return $row; } else { return null; } } else { $this->errorinfo = $db->errno() . ':' . $db->error(); return false; } } public function execute($sql) { $this->errorinfo = ''; if (self::$_config['prefix'] != 'ptcms_' && strpos($sql, 'ptcms_')) { $sql = str_replace('ptcms_', self::$_config['prefix'], $sql); } $db = $this->master(); $row = $db->execute($sql);; if (!$db->error()) { if ($row || $row === 0) { return $row; } else { return null; } } else { $this->errorinfo = $db->errno() . ':' . $db->error(); return false; } } }
class Driver_Db_Mysql_Dao extends Driver_Db_Dao{ }
class Driver_Db_Mysql_Pdo { public static $instance; public $db_link; protected $Transactions; public function __construct($params = array()) { $params['charset']=empty($params['charset'])?'utf8':$params['charset']; $this->db_link = @new PDO("mysql:host={$params['host']};port={$params['port']};dbname={$params['name']}", $params['user'], $params['pwd'], array(PDO::MYSQL_ATTR_INIT_COMMAND => "SET NAMES {$params['charset']}")); if (!$this->db_link) { trigger_error($params['driver'] . ' Server connect fail! <br/>Error Message:' . $this->error() . '<br/>Error Code:' . $this->errno(), E_USER_ERROR); } return true; } public function query($sql) { if (!$sql) { return false; } if (APP_DEBUG || isset($_GET['debug'])) { $t = microtime(true); $result = $this->db_link->query($sql); $GLOBALS['_sql'][] = number_format(microtime(true) - $t, 5) . ' - ' . $sql; } else { $result = $this->db_link->query($sql); } $GLOBALS['_sqlnum']++; return $result; } public function execute($sql) { if (!$sql) { return false; } if (APP_DEBUG || isset($_GET['debug'])) { $t = microtime(true); $result = $this->db_link->exec($sql); $GLOBALS['_sql'][] = number_format(microtime(true) - $t, 5) . ' - ' . $sql; } else { $result = $this->db_link->exec($sql); } $GLOBALS['_sqlnum']++; return $result; } public function error() { $info = $this->db_link->errorInfo(); return isset($info[2])?$info['2']:''; } public function errno() { return $this->db_link->errorCode(); } public function fetch($sql) { if (!$sql) { return false; } $result = $this->query($sql); if (!$result) { return false; } $myrow = $result->fetch(PDO::FETCH_ASSOC); if (!$myrow) return null; return $myrow; } public function fetchAll($sql) { if (!$sql) { return false; } $result = $this->query($sql); if (!$result) { return false; } $myrow = $result->fetchAll(PDO::FETCH_ASSOC); if (!$myrow) return null; return $myrow; } public function insertId() { return $this->db_link->lastInsertId(); } public function escapeString($string) { return addslashes($string); } public function startTrans() { if ($this->Transactions == false) { $this->db_link->beginTransaction(); $this->Transactions = true; } return true; } public function commit() { if ($this->Transactions == true) { if ($this->db_link->commit()) { $this->Transactions = false; } } return true; } public function rollback() { if ($this->Transactions == true) { if ($this->db_link->rollBack()) { $this->Transactions = false; } } } public function __destruct() { if ($this->db_link == true) { $this->db_link = null; } } public static function getInstance($params) { if (!self::$instance) { self::$instance = new self($params); } return self::$instance; } }
